If using the Intel Compiler ...
-------------------------------

The cmake configuration automatically uses the "-assume realloc_lhs" compiler
flag for the Debug and Release build types.  If you use a different build
type you will need to add this flag yourself.  The default behavior of the
compiler is to use non-standard semantics (pre-F2003) and this will break
some parts of the library that rely on the modern standard.

If using the NAG Compiler ...
-----------------------------

Do not use the run-time debugging option -C=intovf, which checks for integer
overflow, as this will trip the secure hash functions which intentionally use
the default wrap-around behavior of integer addition.  Note that this flag is
included as part of -C=all; use -C -C=dangling instead of -C=all.

TIPS
----

When using the fortran_dynamic_linking module you may find yourself needing
to define an interface to a C function that uses call-by-value.  Suppose the
function signature is "float cbrtf(float)".  The required interface and code
would look like

  abstract interface
    real function f(x) bind(c)
      real, value :: x
    end function
  end interface
  procedure(f), pointer :: fptr
  type(c_funptr) :: funptr
  ...
  call c_f_procpointer (funptr, fptr)

For portability the BIND(C) is required to ensure that the VALUE attribute
is interpreted as C's pass-by-value.  Without the BIND(C), the interpretation
of the VALUE attribute may differ from compiler to compiler.

See test_fortran_dynamic_linking.F90 for a full example.
